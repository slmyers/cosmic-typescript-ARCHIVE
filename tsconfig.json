{
    "include": ["src/**/*", "migrations/**/*", "packages/**/*", "test/**/*"],
    "exclude": ["node_modules"],
    "compilerOptions": {
        "experimentalDecorators": true,
        "emitDecoratorMetadata": true,
        "target": "es2016",
        "module": "commonjs",
        "lib": ["es2020"],
        "outDir": "./build",
        "declaration": true,
        "declarationMap": true,
        "sourceMap": true,
        "moduleResolution": "node",
        "allowSyntheticDefaultImports": true,
        "esModuleInterop": true,
        "strict": true,
        "checkJs": true,
        "allowJs": true,
        "skipLibCheck": true,
        "baseUrl": ".",
        "resolveJsonModule": true,
        "paths": {
            /*
        Allow using e.g. `import '@/sample-module' instead of using relative paths.
        This makes import paths easier to manage, since it keeps you out of
        relative-path-hell (e.g. '../../../../lib/sample-module' turns into '@/sample-module').
        
        The tsc compiler *does not* convert these to functional paths. This project uses
        `tsc-alias` after compiling (using `npm run build`) to convert after compile.
        Other options include using Babel with the module resolution extension.

        Change these to whatever you like!
        (Note that using a "$" instead of "@" makes it less ambiguous if you are referring
        to a local or npm module.)
      */
            "@/*": ["packages/*"],
            "$/*": ["src/*"],
            "$cli/*": ["src/cli/*"],
            "$test/*": ["test/*"],
            "$domain/*": ["src/domain/*"],
            "$entity/*": ["src/entity/*"],
            "$service/*": ["src/service/*"],
            "$repository/*": ["src/repository/*"]
        }
    }
}
